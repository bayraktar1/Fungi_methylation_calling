"""
"""
from pathlib import Path
import pandas as pd


# Read configuration
configfile: "config.yaml"

OUTDIR = Path(config["results"])


'''
Comma-seperated table with sample information.

Required headers:
file,source

file MUST be unique
'''
SAMPLE_DATA = pd.read_csv(config["sample_file"], comment="#")
SAMPLES = SAMPLE_DATA["file"]

# check if SAMPLES is indeed unique
if len(SAMPLES) != len(set(SAMPLES)):
    raise RuntimeError("\n*** Samplenames are NOT unique. Please fix your sample definition file. Cannot continue... exiting. ***\n")

# check if all files exist and add them to dict
FILES = {}
for file, source in zip(SAMPLE_DATA["file"], SAMPLE_DATA["source"]):
    p = Path(file)
    if p.exists():
        FILES[file] = [p.resolve(), source]
    else:
        raise RuntimeError(f"\n *** File {p} not found. Please fix your sample definition file. Cannot continue... exiting.  ***\n")



rule all:
    input:
        key_results = expand( OUTDIR / "{sample}.zip", sample=SAMPLES)

rule calculate_methylation_score:
    input:
        tsv ="{sample}"
    output:
        feather = OUTDIR / "{sample}.feather"
    params:
        source = Path(config["source"]),
        window_size = Path(config["windows_size"]),
        chromosome_sizes = Path(config["windows_size"]),
        min_cov = Path(config["min_cov"]),
        out_dir = OUTDIR / "01_feather"
    conda: ""
    log: "logs/calculate_methylation_score_{sample}.log"
    shell:
        '''(
        python scripts/calculate_weighted_methyl_score.py \
            --source {params.source} \
            --file {input.tsv} \ # maybe do something about this flag
            --chromosome_sizes {params.chromosome_sizes} \
            --window_size {params.chromosome_sizes} \
            --output {params.out_dir} / {input.tsv}.feather \
            --score_calculation fungi_weighted_meth \
            --min_cov {params.min_cov}
        ) >{log} 2>&1'''


rule plot_methylation_score:
    input:
        feather = rules.calculate_methylation_score.output.feather
    output:
        plot = OUTDIR / "{sample}.png"
    params: 
        genes = Path(config["genes"]),
        repeats= Path(config["repeats"]),
        chromosomes = Path(config["chromosomes"]),
        plotname = "{sample}"
    conda: ""
    log: "logs/plot_methylatiion_score_{sample}.log"
    shell:
        r'''(
        scripts/plot_weighted_methylation_score.R \
         --genes {params.genes} \
         --repeats {params.repeats} \
         --feather {input.feather} \
         --chromosomes {params.chromosomes} \
         --output  {params.plotname} \
         --label {params.plotname}
        ) >{log} 2>&1'''


rule stats:
    input:
        tsv ="{sample}"
    output:
        processed_nb = OUTDIR / "{sample}.py.ipynb"
    params:
        source = FILES['{sample}'][1]
    conda: ""
    shell:
        '''
        papermill notebooks/{params.source}.py.ipynb {output.processed_nb} -p input_file {input.tsv}
        '''