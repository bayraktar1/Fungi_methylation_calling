"""
"""
from pathlib import Path
import pandas as pd


# Read configuration
configfile: "config.yaml"

OUTDIR = Path(config["results"])


'''
Comma-seperated table with sample information.

Required headers:
file,source,path

file MUST be unique
'''
SAMPLE_DATA = pd.read_csv(config["sample_file"], comment="#")
SAMPLES = list(SAMPLE_DATA["file"])

# check if SAMPLES is indeed unique
if len(SAMPLES) != len(set(SAMPLES)):
    raise RuntimeError("\n*** Samplenames are NOT unique. Please fix your sample definition file. Cannot continue... exiting. ***\n")

# check if all files exist and add them to dict
FILES = {}
for file, source, location in zip(SAMPLE_DATA["file"], SAMPLE_DATA["source"], SAMPLE_DATA["path"]):
    p = Path(location)
    if p.exists():
        FILES[file] = [p.name, source, p.resolve()]
    else:
        raise RuntimeError(f"\n *** File {p} not found. Please fix your sample definition file. Cannot continue... exiting.  ***\n")

# print(f'FILES: {FILES}')
# print(f'SAMPLES: {SAMPLES}')
# print(f'SAMPLE_DATA {SAMPLE_DATA}')


rule all:
    input:
        # feather = expand(OUTDIR / "01_feather" / "{sample}.feather", sample=SAMPLES),
        # plot = expand(OUTDIR / "02_plot" / "{sample}.png",sample=SAMPLES),
        notebook = expand(OUTDIR / "03_stats" / "{sample}.py.ipynb",sample=SAMPLES)



rule calculate_methylation_score:
    input:
        tsv = "data/{sample}"
    output:
        feather = OUTDIR / "01_feather" / "{sample}.feather"
    params:
        stem = lambda wildcards: FILES[wildcards.sample][0],
        source = lambda wildcards: FILES[wildcards.sample][1],
        window_size = config["window_size"],
        chromosome_sizes = Path(config["chromosome_sizes"]),
        min_cov = config["min_cov"],
        out_dir = OUTDIR / "01_feather"
    conda: "envs/calcscore.yaml"
    log: "logs/calculate_methylation_score_{sample}.log"
    shell:
        '''(python scripts/calculate_weighted_methyl_score.py \
         --source {params.source} \
         --file {input.tsv} \
         --chromosome_sizes {params.chromosome_sizes} \
         --window_size {params.window_size} \
         --output {params.stem}.feather \
         --directory {params.out_dir} \
         --score_calculation fungi_weighted_meth \
         --min_cov {params.min_cov}) >{log} 2>&1'''


rule plot_methylation_score:
    input:
        feather = rules.calculate_methylation_score.output.feather
    output:
        plot = OUTDIR / "02_plot" / "{sample}.png"
    params:
        genes = Path(config["genes"]),
        repeats= Path(config["repeats"]),
        chromosomes = Path(config["chromosome_sizes"]),
        plotname = "{sample}",
        outdir = lambda wildcards: OUTDIR / "02_plot" / wildcards.sample
    conda: "envs/plotr.yaml"
    log: "logs/plot_methylatiion_score_{sample}.log"
    shell:
        r'''(
        scripts/plot_weighted_methylation_score.R \
         --genes {params.genes} \
         --repeats {params.repeats} \
         --feather {input.feather} \
         --chromosomes {params.chromosomes} \
         --output  {params.outdir} \
         --label {params.plotname}
        ) >{log} 2>&1'''


rule stats:
    input:
        tsv ="data/{sample}"
    output:
        processed_nb = OUTDIR / "03_stats" / "{sample}.py.ipynb"
    params:
        source= lambda wildcards: FILES[wildcards.sample][1],
    conda: "envs/papermillstats.yaml"
    log: "logs/stats_{sample}.log"
    shell:
        '''
        (papermill notebooks/{params.source}.py.ipynb {output.processed_nb} -p data_file {input.tsv}) >{log} 2>&1
        '''
